{"version":3,"sources":["components/card.js","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","handleClick","id","number","Navbar","href","currentScore","highScore","shuffle","require","App","state","numbers","clickedNumbers","shuffleCards","_this","clickedId","includes","gameOver","push","incrementScore","tempScore","setState","this","_this2","navbar","map","card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAUeA,EARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,QAAW,WAAML,EAAMM,YAAYN,EAAMO,MAC/DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcJ,EAAMQ,WCSzBC,EAZA,SAAAT,GAAK,OAClBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kCACbH,EAAAC,EAAAC,cAAA,KAAGO,KAAK,IAAIN,UAAU,qBAAtB,wBACAH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,KAAR,kBAA4BV,EAAMW,eACtCV,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGO,KAAK,KAAR,cAAwBV,EAAMY,uBCJpCC,EAAUC,EAAQ,IA4ETC,6MAzEbC,MAAQ,CACNL,aAAc,EACdC,UAAW,EACXK,UACAC,eAAgB,MAWlBC,aAAe,WACb,OAAON,EAAQO,EAAKJ,MAAMC,YAG5BX,YAAc,SAACe,GACVD,EAAKJ,MAAME,eAAeI,SAASD,GACpCD,EAAKG,YAGLH,EAAKJ,MAAME,eAAeM,KAAKH,GAC/BD,EAAKK,qBAITF,SAAW,WACT,GAAGH,EAAKJ,MAAML,aAAeS,EAAKJ,MAAMJ,UAAW,CACjD,IAAMc,EAAYN,EAAKJ,MAAML,aAC7BS,EAAKO,SAAS,CACZhB,aAAc,EACdC,UAAWc,EACXT,QAASG,EAAKD,eACdD,eAAgB,UAIlBE,EAAKO,SAAS,CACZhB,aAAc,EACdC,UAAWQ,EAAKJ,MAAMJ,UACtBK,QAASG,EAAKD,eACdD,eAAgB,QAKtBO,eAAiB,WACfL,EAAKO,SAAS,CACZV,QAASG,EAAKD,eACdR,aAAcS,EAAKJ,MAAML,aAAe,wFA5C1CiB,KAAKD,SACH,CACEV,QAAUW,KAAKT,kDA8CZ,IAAAU,EAAAD,KACP,OACE3B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAQnB,aAAgBiB,KAAKZ,MAAML,aAAcC,UAAagB,KAAKZ,MAAMJ,YACzEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZwB,KAAKZ,MAAMC,QAAQc,IAAI,SAAAvB,GACtB,OAAQP,EAAAC,EAAAC,cAAC6B,EAAD,CAAM1B,YAAeuB,EAAKvB,YAAaC,GAAIC,EAAOD,GAAIC,OAAQA,EAAOA,qBAhEzEyB,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a5c277b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = props => (\r\n  <div className=\"col s3\" onClick = {()=> {props.handleClick(props.id)}}>\r\n    <div className=\"card blue-grey darken-1 center-align\">\r\n      <h1 className=\"white-text\">{props.number}</h1>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Card;","import React from 'react'\r\n\r\nconst Navbar = props => (\r\n  <nav>\r\n    <div className=\"nav-wrapper blue-grey darken-3\">\r\n      <a href='/' className=\"brand-logo center\">Click the Numbers...</a>\r\n      <ul>\r\n        <li><a href=\"/\">Current Score: {props.currentScore}</a></li>\r\n        <li><a href=\"/\">HighScore: {props.highScore}</a></li>\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n)\r\n\r\nexport default Navbar","import React, { Component } from 'react';\nimport Card from \"./components/card\";\nimport Navbar from \"./components/navbar\";\nimport numbers from \"./primenumbers\"\nconst shuffle = require('shuffle-array');\n\nclass App extends Component {\n  state = {\n    currentScore: 0,\n    highScore: 0,\n    numbers,\n    clickedNumbers: []\n  };\n\n  componentDidMount() {\n    this.setState(\n      {\n        numbers : this.shuffleCards()\n      }\n    )\n  };\n\n  shuffleCards = () => {\n    return shuffle(this.state.numbers);\n  };\n\n  handleClick = (clickedId) => {\n    if(this.state.clickedNumbers.includes(clickedId)) {\n      this.gameOver();\n    }\n    else {\n      this.state.clickedNumbers.push(clickedId);\n      this.incrementScore();\n    }\n  };\n\n  gameOver = () => {\n    if(this.state.currentScore > this.state.highScore) {\n      const tempScore = this.state.currentScore;\n      this.setState({\n        currentScore: 0,\n        highScore: tempScore,\n        numbers: this.shuffleCards(),\n        clickedNumbers: []\n      })\n    }\n    else {\n      this.setState({\n        currentScore: 0,\n        highScore: this.state.highScore,\n        numbers: this.shuffleCards(),\n        clickedNumbers: []\n      })\n    }\n  };\n\n  incrementScore = () => {\n    this.setState({\n      numbers: this.shuffleCards(),\n      currentScore: this.state.currentScore + 1\n    })\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar currentScore = {this.state.currentScore} highScore = {this.state.highScore} />\n        <div className='container'>\n          <div className='row'>\n            {this.state.numbers.map(number => {\n              return (<Card handleClick = {this.handleClick} id={number.id} number={number.number}/>)\n            })}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}